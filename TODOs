
- Generalize Garner's algorithm

##################################
# BEFORE RELEASING FIRST VERSION #
##################################

- Modify params.h to choose parameters properly

- I am not sure of how the scaling of the message as in (floor(q/p)m_i)1_R should be done!

####################################
# POSSIBLE CHANGE IN THE INTERFACE #
####################################

- All inputs and outputs are currently in CRT domain only, at least message and decrypted message should be in the domain modulo q, while the keys is probably better to keep them in CRT domain since there is no memory overhead but performance gain for saving up the conversions

- Store messages and keys as bitstrings using unpacking functions before performing operations

#################
# OPTIMIZATIONS #
#################

- Currently sampling is extremely inefficient since it is uniform and drawing every single sample from rand()

- Use NTT for multiplication, use a more efficient modular reduction algorithm

- Can polynomials be sampled on the CRT domain *AND* the NTT domain directly? How would it change the statistical distribution? At least a which is sampled from an uniform distribution could be sample like this? Store and operate poynomials in the CRT-NTT domain (for now there is no NTT because it's all schoolbook)

